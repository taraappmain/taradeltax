# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from .affiliate_manager import get_affiliate_count, get_affiliate_earnings, get_affiliate_details

def crypto_agent_ui(agent):
    st.write("---")
    st.title("ðŸª™ Crypto Agent Dashboard")

    tabs = st.tabs([
        "Portfolio",
        "Trade History",
        "Portfolio Over Time",
        "Yield Farming",
        "Affiliates"
    ])

    agent_id = getattr(agent, 'agent_id', 'A001')

    # -------------------- Portfolio --------------------
    with tabs[0]:
        col1, col2 = st.columns([2, 3])
        with col1:
            st.metric("Total Earned", f"${agent.total_earned:,.2f}")
            st.metric("Withdrawable", f"${agent.withdrawable:,.2f}")

            # Affiliate summary metrics
            st.metric("Affiliates", f"{get_affiliate_count(agent_id)}")
            st.metric("Affiliate Earnings", f"${get_affiliate_earnings(agent_id):,.2f}")

            if st.button("Refresh Prices"):
                try:
                    agent.get_crypto_data()
                    agent._save_portfolio()
                    agent.record_snapshot()
                    st.success("Prices refreshed successfully!")
                except Exception as e:
                    st.error(f"Error refreshing prices: {e}")

        with col2:
            st.subheader("Current Portfolio")
            df = agent.get_portfolio_df()
            if df.empty or df['value'].sum() == 0:
                st.info("Portfolio is empty or has no value.")
            else:
                st.dataframe(df[['name', 'amount', 'current_price', 'value']].sort_values(by='value', ascending=False), use_container_width=True)
                fig, ax = plt.subplots()
                ax.pie(df['value'], labels=df['name'], autopct='%1.1f%%', startangle=140)
                ax.axis('equal')
                st.pyplot(fig)

        # Buy / Sell
        st.subheader("Buy / Sell Cryptos")
        df = agent.get_portfolio_df()
        portfolio_coins = sorted(set(df['name'].dropna().tolist()))
        popular_coins = ['Bitcoin', 'Ethereum', 'Tether', 'BNB', 'Cardano']
        coins = sorted(set(portfolio_coins + popular_coins))

        col_buy, col_sell = st.columns(2)
        with col_buy:
            st.write("### Buy")
            coin_to_buy = st.selectbox("Select coin to buy", coins, key="buy_coin")
            buy_amount = st.number_input("Amount in USD", min_value=1.0, step=1.0, key="buy_amount")
            if st.button("Buy", key="buy_btn"):
                try:
                    agent.buy(coin_to_buy, buy_amount)
                    st.success(f"Bought ${buy_amount} of {coin_to_buy}")
                    st.experimental_rerun()
                except Exception as e:
                    st.error(f"Error buying coin: {e}")

        with col_sell:
            st.write("### Sell")
            coin_to_sell = st.selectbox("Select coin to sell", portfolio_coins if portfolio_coins else ["None"], key="sell_coin")
            sell_amount = st.number_input("Amount in USD", min_value=1.0, step=1.0, key="sell_amount")
            if st.button("Sell", key="sell_btn"):
                try:
                    agent.sell(coin_to_sell, sell_amount)
                    st.success(f"Sold ${sell_amount} of {coin_to_sell}")
                    st.experimental_rerun()
                except Exception as e:
                    st.error(f"Error selling coin: {e}")

    # -------------------- Trade History --------------------
    with tabs[1]:
        st.subheader("Trade History")
        try:
            trades = agent.get_trade_history()
            if trades.empty:
                st.info("No trade history yet.")
            else:
                st.dataframe(trades, use_container_width=True)
        except Exception as e:
            st.error(f"Error loading trade history: {e}")

    # -------------------- Portfolio Over Time --------------------
    with tabs[2]:
        st.subheader("Portfolio Value Over Time")
        try:
            summary_df = agent.get_history_summary()
            if summary_df.empty:
                st.info("No historical portfolio data available.")
            else:
                summary_df = summary_df.rename(columns={"timestamp": "Date", "value": "Portfolio Value"})
                summary_df['Date'] = pd.to_datetime(summary_df['Date'])
                summary_df = summary_df.sort_values('Date')
                st.line_chart(summary_df.set_index('Date')['Portfolio Value'])
        except Exception as e:
            st.error(f"Error loading portfolio history: {e}")

    # -------------------- Yield Farming --------------------
    with tabs[3]:
        st.subheader("Yield Farming Rewards")
        st.caption("Log and track your DeFi/staking rewards")
        try:
            reward_df = agent.get_yield_rewards()
            if reward_df.empty:
                st.info("No yield rewards logged yet.")
            else:
                st.dataframe(reward_df, use_container_width=True)
        except Exception as e:
            st.error(f"Error loading yield rewards: {e}")

        st.divider()
        st.subheader("Add New Yield Reward")
        col1, col2 = st.columns(2)
        with col1:
            protocol = st.text_input("Protocol (e.g., Lido, Rocket Pool)")
            coin = st.text_input("Coin Symbol", value="ETH")
        with col2:
            amt = st.number_input("Amount Earned", min_value=0.0001, step=0.01)

        if st.button("Log Reward"):
            if protocol.strip() and coin.strip() and amt > 0:
                try:
                    agent.record_yield(protocol.strip(), coin.strip(), amt)
                    st.success(f"Logged {amt} {coin.upper()} from {protocol}")
                    st.experimental_rerun()
                except Exception as e:
                    st.error(f"Error logging reward: {e}")
            else:
                st.warning("Please fill all fields correctly.")

    # -------------------- Affiliates --------------------
    with tabs[4]:
        st.subheader("Affiliate Program")
        try:
            affiliate_data = get_affiliate_details(agent_id)
            if not affiliate_data:
                st.info("No affiliates linked to this agent.")
            else:
                for row in affiliate_data:
                    st.markdown(f"""
                    - **{row['name']}**
                      - Joined: {row['joined_date']}
                      - Earnings: ${row['earnings']:,.2f}
                      - [Join via Link]({row['referral_link']})
                    """)
        except Exception as e:
            st.error(f"Error loading affiliate data: {e}")