# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from .affiliate_manager import get_affiliate_count, get_affiliate_earnings, get_affiliate_details

class CryptoAgent:
    def __init__(self, agent_id="A001"):
        self.agent_id = agent_id
        self.total_earned = 0.0
        self.withdrawable = 0.0

    def get_crypto_data(self):
        # TODO: fetch real-time data or simulate
        pass

    def _save_portfolio(self):
        # TODO: persist portfolio data
        pass

    def record_snapshot(self):
        # TODO: log a snapshot of portfolio
        pass

    def get_portfolio_df(self):
        # Example test dataâ€”replace with real fetch
        return pd.DataFrame([
            {"name": "Bitcoin",  "amount": 0.1, "current_price": 60000, "value": 6000},
            {"name": "Ethereum", "amount": 1.0, "current_price": 3200,  "value": 3200},
        ])

    def get_trade_history(self):
        import datetime as dt
        return pd.DataFrame([
            {"timestamp": dt.datetime.now(), "trade": "buy BTC", "amount": 0.1},
        ])

    def get_history_summary(self):
        import datetime as dt
        return pd.DataFrame([
            {"timestamp": dt.datetime.now() - dt.timedelta(days=i), "value":  (9000 + i*100)}
            for i in range(5)
        ])

    def get_yield_rewards(self):
        # No rewards yet
        return pd.DataFrame([])

    def buy(self, coin, amount):
        # TODO: implement buy logic
        pass

    def sell(self, coin, amount):
        # TODO: implement sell logic
        pass

    def record_yield(self, protocol, coin, amount):
        # TODO: implement yield record
        pass


def crypto_agent_ui(agent):
    st.write("---")
    st.title("ðŸª™ Crypto Agent Dashboard")

    tabs = st.tabs([
        "Portfolio",
        "Trade History",
        "Portfolio Over Time",
        "Yield Farming",
        "Affiliates"
    ])

    agent_id = getattr(agent, 'agent_id', 'A001')

    # -------------------- Portfolio --------------------
    with tabs[0]:
        col1, col2 = st.columns([2, 3])
        with col1:
            st.metric("Total Earned", f"${agent.total_earned:,.2f}")
            st.metric("Withdrawable", f"${agent.withdrawable:,.2f}")

            # Affiliate summary
            st.metric("Affiliates", f"{get_affiliate_count(agent_id)}")
            st.metric("Affiliate Earnings", f"${get_affiliate_earnings(agent_id):,.2f}")

            if st.button("Refresh Prices"):
                try:
                    agent.get_crypto_data()
                    agent._save_portfolio()
                    agent.record_snapshot()
                    st.success("Prices refreshed successfully!")
                except Exception as e:
                    st.error(f"Error refreshing prices: {e}")

        with col2:
            st.subheader("Current Portfolio")
            df = agent.get_portfolio_df()
            if df.empty or df['value'].sum() == 0:
                st.info("Portfolio is empty or has no value.")
            else:
                st.dataframe(
                    df[['name', 'amount', 'current_price', 'value']]
                      .sort_values(by='value', ascending=False),
                    use_container_width=True
                )
                fig, ax = plt.subplots()
                ax.pie(df['value'], labels=df['name'], autopct='%1.1f%%', startangle=140)
                ax.axis('equal')
                st.pyplot(fig)

        # Buy / Sell section
        st.subheader("Buy / Sell Cryptos")
        df = agent.get_portfolio_df()
        portfolio_coins = sorted(set(df['name'].dropna().tolist()))
        popular_coins = ['Bitcoin', 'Ethereum', 'Tether', 'BNB', 'Cardano']
        coins = sorted(set(portfolio_coins + popular_coins))

        col_buy, col_sell = st.columns(2)
        with col_buy:
            st.write("### Buy")
            coin_to_buy = st.selectbox("Select coin to buy", coins, key="buy_coin")
            buy_amount = st.number_input("Amount in USD", min_value=1.0, step=1.0, key="buy_amount")
            if st.button("Buy", key="buy_btn"):
                try:
                    agent.buy(coin_to_buy, buy_amount)
                    st.success(f"Bought ${buy_amount} of {coin_to_buy}")
                    st.experimental_rerun()
                except Exception as e:
                    st.error(f"Error buying coin: {e}")

        with col_sell:
            st.write("### Sell")
            coin_to_sell = st.selectbox(
                "Select coin to sell",
                portfolio_coins if portfolio_coins else ["None"],
                key="sell_coin"
            )
            sell_amount = st.number_input("Amount in USD", min_value=1.0, step=1.0, key="sell_amount")
            if st.button("Sell", key="sell_btn"):
                try:
                    agent.sell(coin_to_sell, sell_amount)
                    st.success(f"Sold ${sell_amount} of {coin_to_sell}")
                    st.experimental_rerun()
                except Exception as e:
                    st.error(f"Error selling coin: {e}")

    # -------------------- Trade History --------------------
    with tabs[1]:
        st.subheader("Trade History")
        try:
            trades = agent.get_trade_history()
            if trades.empty:
                st.info("No trade history yet.")
            else:
                st.dataframe(trades, use_container_width=True)
        except Exception as e:
            st.error(f"Error loading trade history: {e}")

    # -------------------- Portfolio Over Time --------------------
    with tabs[2]:
        st.subheader("Portfolio Value Over Time")
        try:
            summary_df = agent.get_history_summary()
            if summary_df.empty:
                st.info("No historical portfolio data available.")
            else:
                summary_df = summary_df.rename(columns={"timestamp": "Date", "value": "Portfolio Value"})
                summary_df['Date'] = pd.to_datetime(summary_df['Date'])
                summary_df = summary_df.sort_values('Date')
                st.line_chart(summary_df.set_index('Date')['Portfolio Value'])
        except Exception as e:
            st.error(f"Error loading portfolio history: {e}")

    # -------------------- Yield Farming --------------------
    with tabs[3]:
        st.subheader("Yield Farming Rewards")
        st.caption("Log and track your DeFi/staking rewards")
        try:
            reward_df = agent.get_yield_rewards()
            if reward_df.empty:
                st.info("No yield rewards logged yet.")
            else:
                st.dataframe(reward_df, use_container_width=True)
        except Exception as e:
            st.error(f"Error loading yield rewards: {e}")

        st.divider()