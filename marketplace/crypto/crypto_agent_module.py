# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

import json
import os
import pandas as pd
from datetime import datetime
from pathlib import Path

class CryptoAgent:
    def __init__(self, agent_id):
        self.agent_id = agent_id
        self.db_file = f"crypto_agent_{agent_id.lower()}.db"
        self.portfolio = {}
        self.trade_history = []
        self.yield_rewards = []
        self.history_summary = []
        self.total_earned = 0.0
        self.withdrawable = 0.0
        self.load_data()

    def load_data(self):
        if Path(self.db_file).exists():
            with open(self.db_file, "r") as f:
                data = json.load(f)
                self.portfolio = data.get("portfolio", {})
                self.trade_history = data.get("trade_history", [])
                self.yield_rewards = data.get("yield_rewards", [])
                self.total_earned = data.get("total_earned", 0.0)
                self.withdrawable = data.get("withdrawable", 0.0)
                self.history_summary = data.get("history_summary", [])
        else:
            self.save()

    def save(self):
        data = {
            "portfolio": self.portfolio,
            "trade_history": self.trade_history,
            "yield_rewards": self.yield_rewards,
            "total_earned": self.total_earned,
            "withdrawable": self.withdrawable,
            "history_summary": self.history_summary,
        }
        with open(self.db_file, "w") as f:
            json.dump(data, f, indent=2)

    def get_crypto_data(self):
        # Simulated price fetch (replace with live API if needed)
        prices = {
            "Bitcoin": 60000,
            "Ethereum": 3500,
            "Tether": 1,
            "BNB": 420,
            "Cardano": 0.45
        }
        for coin, info in self.portfolio.items():
            info["current_price"] = prices.get(coin, 1)
            info["value"] = info["amount"] * info["current_price"]
        self.save()

    def _save_portfolio(self):
        self.save()

    def get_portfolio_df(self):
        rows = []
        for coin, data in self.portfolio.items():
            rows.append({
                "name": coin,
                "amount": data["amount"],
                "current_price": data.get("current_price", 0),
                "value": data["amount"] * data.get("current_price", 0)
            })
        return pd.DataFrame(rows)

    def buy(self, coin, amount_usd):
        self.get_crypto_data()
        price = self.portfolio.get(coin, {}).get("current_price", 100)
        qty = amount_usd / price
        if coin in self.portfolio:
            self.portfolio[coin]["amount"] += qty
        else:
            self.portfolio[coin] = {"amount": qty, "current_price": price}
        self.total_earned += amount_usd
        self.withdrawable += amount_usd * 0.05
        self.trade_history.append({
            "type": "Buy",
            "coin": coin,
            "amount_usd": amount_usd,
            "price": price,
            "timestamp": datetime.now().isoformat()
        })
        self.save()

    def sell(self, coin, amount_usd):
        self.get_crypto_data()
        price = self.portfolio.get(coin, {}).get("current_price", 100)
        qty = amount_usd / price
        if coin in self.portfolio and self.portfolio[coin]["amount"] >= qty:
            self.portfolio[coin]["amount"] -= qty
            self.withdrawable += amount_usd * 0.95
            self.trade_history.append({
                "type": "Sell",
                "coin": coin,
                "amount_usd": amount_usd,
                "price": price,
                "timestamp": datetime.now().isoformat()
            })
            self.save()
        else:
            raise ValueError("Insufficient amount to sell")

    def get_trade_history(self):
        return pd.DataFrame(self.trade_history)

    def record_snapshot(self):
        total = sum([v["amount"] * v.get("current_price", 1) for v in self.portfolio.values()])
        self.history_summary.append({
            "timestamp": datetime.now().isoformat(),
            "value": total
        })
        self.save()

    def get_history_summary(self):
        return pd.DataFrame(self.history_summary)

    def get_yield_rewards(self):
        return pd.DataFrame(self.yield_rewards)

    def record_yield(self, protocol, coin, amount):
        self.yield_rewards.append({
            "protocol": protocol,
            "coin": coin,
            "amount": amount,
            "timestamp": datetime.now().isoformat()
        })
        self.withdrawable += amount
        self.total_earned += amount
        self.save()


# Optional: include UI fallback for debugging
def crypto_agent_ui(agent):
    import streamlit as st
    st.subheader("Crypto Agent Loaded")
    df = agent.get_portfolio_df()
    if df.empty:
        st.info("No crypto holdings yet.")
    else:
        st.dataframe(df)