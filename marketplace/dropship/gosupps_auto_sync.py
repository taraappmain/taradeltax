# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

# -*- coding: utf-8 -*-
import requests
import time
from dotenv import load_dotenv
import os

load_dotenv()  # Load environment variables from .env

SHOPIFY_STORE_URL = os.getenv("SHOPIFY_STORE_URL")
SHOPIFY_ACCESS_TOKEN = os.getenv("SHOPIFY_ACCESS_TOKEN")

# Stub for real GoSupps scraper - replace with your actual scraper logic
def fetch_go_supps_products():
    # This is static sample data for demonstration
    return [
        {
            "title": "15 in 1 Dog Multivitamin Treats",
            "image": "https://www.gosupps.com/media/catalog/product/cache/25/small_image/375x450/81saQ3YPTOL.jpg",
            "price": "64.99"
        },
        {
            "title": "Monthly Pill Organizer",
            "image": "https://www.gosupps.com/media/catalog/product/cache/25/small_image/375x450/715VUXyWfcL.jpg",
            "price": "53.99"
        }
    ]

def get_existing_shopify_titles():
    print("üì° Retrieving existing Shopify products...")
    url = f"{SHOPIFY_STORE_URL}/admin/api/2024-01/products.json"
    headers = {
        "X-Shopify-Access-Token": SHOPIFY_ACCESS_TOKEN,
        "Content-Type": "application/json"
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        titles = [p["title"] for p in data.get("products", [])]
        print(f"‚úÖ Found {len(titles)} existing product(s).")
        return titles
    else:
        print("‚ùå Failed to retrieve existing products.")
        print("‚Üí", response.status_code, response.text)
        return []

def upload_to_shopify(product):
    url = f"{SHOPIFY_STORE_URL}/admin/api/2024-01/products.json"
    headers = {
        "X-Shopify-Access-Token": SHOPIFY_ACCESS_TOKEN,
        "Content-Type": "application/json"
    }

    payload = {
        "product": {
            "title": product["title"],
            "body_html": f"<strong>{product['title']}</strong>",
            "images": [{"src": product["image"]}],
            "variants": [{"price": product["price"]}]
        }
    }

    response = requests.post(url, headers=headers, json=payload)

    if response.status_code == 201:
        print(f"‚úÖ Uploaded: {product['title']}")
    else:
        print(f"‚ùå Failed to upload: {product['title']}")
        print("‚Üí", response.status_code, response.text)

def auto_sync():
    if not SHOPIFY_STORE_URL or not SHOPIFY_ACCESS_TOKEN:
        print("‚ùå Missing Shopify credentials. Please check your .env file.")
        return

    print("üöÄ Starting GoSupps ‚Üí Shopify auto-sync...\n")
    go_supps_products = fetch_go_supps_products()
    existing_titles = get_existing_shopify_titles()

    for product in go_supps_products:
        if product["title"] not in existing_titles:
            print(f"üîÑ Syncing: {product['title']}")
            upload_to_shopify(product)
            time.sleep(2)  # Rate limit buffer
        else:
            print(f"‚è≠Ô∏è Skipping (already exists): {product['title']}")

    print("\n‚úÖ Auto-sync complete.")

if __name__ == "__main__":
    auto_sync()