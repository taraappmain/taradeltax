# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

import requests
import logging

BACKEND_URL = "http://127.0.0.1:8000"
AGENT_ID = "A007"  # Dropshipping Agent ID

def fetch_dropship_products() -> list:
    """
    Fetch dropshipping product data from backend API for agent A007.
    Returns a list of product dicts or empty list on failure.
    """
    url = f"{BACKEND_URL}/api/agents/{AGENT_ID}/products"
    try:
        response = requests.get(url, timeout=8)
        response.raise_for_status()
        data = response.json()
        products = data.get("products", [])
        return products
    except requests.RequestException as e:
        logging.error(f"Failed to fetch dropshipping products: {e}")
        return []

def enrich_products(products: list) -> list:
    """
    Optional: Add margin and profit percentage calculations to products.
    Assumes each product has 'cost' and 'price' keys.
    """
    for p in products:
        try:
            cost = float(p.get("cost", 0))
            price = float(p.get("price", 0))
            if cost > 0 and price > 0:
                margin = round(price - cost, 2)
                profit_pct = round(100 * (margin / cost), 1)
            else:
                margin = 0.0
                profit_pct = 0.0
            p["margin"] = margin
            p["profit_pct"] = profit_pct
        except (ValueError, TypeError):
            p["margin"] = 0.0
            p["profit_pct"] = 0.0
    return products

# Example usage:
if __name__ == "__main__":
    products = fetch_dropship_products()
    enriched_products = enrich_products(products)
    for p in enriched_products:
        print(f"{p.get('name')} - Price: ${p.get('price')} - Stock: {p.get('stock')} - Profit%: {p.get('profit_pct')}%")