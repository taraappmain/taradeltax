# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

# -*- coding: utf-8 -*-
"""Tara Unified Dashboard with Backend Sync, Global Affiliates, Dropshipping, and Shopify Integration"""

import sys
import os
import streamlit as st
import pandas as pd
import logging
import requests
import streamlit.components.v1 as components
from dotenv import load_dotenv

load_dotenv()  # Load .env for Shopify and backend URLs

# --- Plugin Imports (mocked here for example) ---
try:
    from tara_skills import stock_plugin
except ImportError:
    stock_plugin = None

try:
    from tera.marketplace.crypto.crypto_agent_module import CryptoAgent, crypto_agent_ui
except ImportError:
    CryptoAgent = None
    crypto_agent_ui = None

try:
    from tara_skills import crypto_plugin
except ImportError:
    crypto_plugin = None

try:
    from tara_voice.voice_toggle import toggle_voice_mode
except ImportError:
    def toggle_voice_mode():
        st.warning("Voice module not found.")

try:
    from marketplace.dropship.tara_dropship import fetch_shopify_products
except ImportError:
    fetch_shopify_products = None

# --- Logging Setup ---
logging.basicConfig(
    filename='tara_dashboard.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# --- Backend API URL ---
BACKEND_URL = os.getenv("BACKEND_URL", "http://127.0.0.1:8000")

# --- Backend Fetch Functions ---
def fetch_agents():
    try:
        resp = requests.get(f"{BACKEND_URL}/api/agents/status")
        resp.raise_for_status()
        return resp.json().get("agents", [])
    except Exception as e:
        st.error(f"Failed to fetch agents from backend: {e}")
        # Fallback dummy data for testing:
        return [
            {
                "agent_id": "A001",
                "name": "Tara Stock Plugin",
                "category": "Finance",
                "status": "Live",
                "affiliate_link": "https://example.com/stock",
                "withdrawable_balance": 3280.0,
                "weekly_earnings": 200.0,
                "monthly_profit": 800.0,
                "crypto_withdrawable_balance": 0.0,  # <-- Added to support crypto
            },
            {
                "agent_id": "A002",
                "name": "YouTube Engine",
                "category": "Content AI",
                "status": "Live",
                "affiliate_link": "https://example.com/youtube",
                "withdrawable_balance": 970.0,
                "weekly_earnings": 160.0,
                "monthly_profit": 640.0,
                "crypto_withdrawable_balance": 0.0,
            },
            {
                "agent_id": "A004",
                "name": "Crypto Agent",
                "category": "Finance",
                "status": "Live",
                "affiliate_link": "https://example.com/crypto",
                "withdrawable_balance": 900.0,
                "weekly_earnings": 300.0,
                "monthly_profit": 1200.0,
                "crypto_withdrawable_balance": 5.234567,  # example crypto balance
            },
        ]

def fetch_affiliates_for_agent(agent_id):
    try:
        resp = requests.get(f"{BACKEND_URL}/api/agents/{agent_id}/affiliates")
        resp.raise_for_status()
        return resp.json().get("affiliates", [])
    except Exception as e:
        st.warning(f"Failed to fetch affiliates for agent {agent_id}: {e}")
        return []

def fetch_dropshipping_products():
    try:
        resp = requests.get(f"{BACKEND_URL}/api/agents/A007/products")
        resp.raise_for_status()
        return resp.json().get("products", [])
    except Exception as e:
        st.error(f"Failed to fetch dropshipping products: {e}")
        return []

# --- Streamlit Setup ---
st.set_page_config(page_title="Tara Delta Monetization Dashboard", layout="wide")
st.title("🧠 Tara Delta Monetization Control Center")

# --- Initialize Session State ---
if 'tara_agents_df' not in st.session_state:
    agents = fetch_agents()
    if agents:
        df = pd.DataFrame(agents)
        df.rename(columns={
            'agent_id': 'Agent ID',
            'name': 'Agent Name',
            'category': 'Category',
            'weekly_earnings': 'Weekly Earnings',
            'monthly_profit': 'Monthly Profit',
            'withdrawable_balance': 'Withdrawable Balance',
            'status': 'Status',
            'affiliate_link': 'Affiliate Link',
            'crypto_withdrawable_balance': 'Crypto Withdrawable Balance',
        }, inplace=True)
        if 'Monetizing' not in df.columns:
            df['Monetizing'] = True
        st.session_state.tara_agents_df = df
    else:
        st.session_state.tara_agents_df = pd.DataFrame([])

if not st.session_state.get("agents_activated", False):
    st.session_state.tara_agents_df["Status"] = "Live"
    st.session_state.tara_agents_df["Monetizing"] = True
    st.session_state["agents_activated"] = True

# --- Command Processor ---
def execute_dang_task(task_name):
    task = task_name.strip().lower()
    df = st.session_state.tara_agents_df
    if task == "activate all agents":
        df["Status"] = "Live"
        df["Monetizing"] = True
        return True
    elif task.startswith("activate agent"):
        aid = task.split()[-1].upper()
        if aid in df["Agent ID"].values:
            df.loc[df["Agent ID"] == aid, ["Status", "Monetizing"]] = ["Live", True]
            return True
    elif task.startswith("deactivate agent"):
        aid = task.split()[-1].upper()
        if aid in df["Agent ID"].values:
            df.loc[df["Agent ID"] == aid, ["Status", "Monetizing"]] = ["Inactive", False]
            return True
    return False

# --- Tabs ---
tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs([
    "📊 Overview",
    "🧠 Agents",
    "💸 Crypto",
    "📈 Stocks",
    "🌐 Global Affiliates",
    "🏦 Withdrawals",
    "📦 Dropshipping",
    "🏬 Shopify Products"
])

# --- Tab 1: Overview ---
with tab1:
    st.header("📊 Dashboard Overview")
    df = st.session_state.get('tara_agents_df', pd.DataFrame())
    st.write(f"Total agents loaded: {len(df)}")

    total_fiat = df["Withdrawable Balance"].sum() if "Withdrawable Balance" in df.columns else 0
    total_crypto = df["Crypto Withdrawable Balance"].sum() if "Crypto Withdrawable Balance" in df.columns else 0

    st.markdown(f"**Total Fiat Withdrawable:** ${total_fiat:,.2f}")
    st.markdown(f"**Total Crypto Withdrawable:** {total_crypto:,.6f} tokens")

# --- Tab 2: Agents ---
with tab2:
    st.header("🧠 Agent Control & Earnings")
    df = st.session_state.get('tara_agents_df', pd.DataFrame())
    if df.empty:
        st.warning("No agent data loaded.")
    else:
        df_display = df.copy()
        df_display["Daily Earnings"] = (df_display["Weekly Earnings"] / 7).round(2)
        df_display["Monetizing"] = df_display["Monetizing"].apply(lambda x: "Yes" if x else "No")
        df_display["Status"] = df_display["Status"].apply(lambda s: "🟢 Live" if str(s).lower() == "live" else "⚫ Inactive")
        st.dataframe(df_display)

        cmd = st.text_input("Command (e.g., 'activate all agents', 'deactivate agent A002'):")
        if cmd:
            result = execute_dang_task(cmd)
            if result:
                st.success(f"Command executed: {cmd}")
                st.experimental_rerun()
            else:
                st.error(f"Unknown command or invalid agent ID: {cmd}")

# --- Tab 3: Crypto ---
with tab3:
    st.header("💸 Crypto Agent")
    if CryptoAgent and crypto_agent_ui:
        crypto_agent_ui()
    else:
        st.info("Crypto agent plugin not loaded.")

# --- Tab 4: Stocks ---
with tab4:
    st.header("📈 Stock Market Plugin")
    if stock_plugin:
        st.write("Stock plugin UI placeholder")
        # stock_plugin.ui()
    else:
        st.info("Stock plugin not loaded.")

# --- Tab 5: Global Affiliates ---
with tab5:
    st.header("🌐 Global Affiliates")

    df = st.session_state.get('tara_agents_df', pd.DataFrame())
    if df.empty:
        st.warning("No agents to display affiliates.")
    else:
        agent_select = st.selectbox("Select Agent", df["Agent ID"])
        affiliates = fetch_affiliates_for_agent(agent_select)
        if affiliates:
            aff_df = pd.DataFrame(affiliates)
            st.dataframe(aff_df)
        else:
            st.info("No affiliates found or API error.")

# --- Tab 6: Withdrawals ---
with tab6:
    st.header("🏦 Withdrawals")

    with st.form("withdrawal_form"):
        st.info("Submit withdrawal request with fiat and/or crypto")

        fiat_amount = st.number_input("Fiat Amount (e.g., USD)", min_value=0.0, step=0.01, format="%.2f")
        crypto_amount = st.number_input("Crypto Token Amount", min_value=0.0, step=0.0001, format="%.8f")
        token_type = st.selectbox("Token Type", ["BTC", "ETH", "USDT", "BUSD", "USDC"])
        token_pin = st.text_input("Token PIN", type="password", max_chars=6)
        receiver_wallet = st.text_input("Crypto Receiver Wallet Address")

        submitted = st.form_submit_button("Submit Withdrawal")

        if submitted:
            if (fiat_amount <= 0 and crypto_amount <= 0):
                st.error("Please enter a fiat or crypto amount to withdraw.")
            elif crypto_amount > 0 and (not token_pin or not receiver_wallet):
                st.error("For crypto withdrawals, token PIN and receiver wallet address are required.")
            else:
                withdrawal_data = {
                    "fiat_amount": fiat_amount,
                    "crypto_amount": crypto_amount,
                    "token_type": token_type,
                    "token_pin": token_pin,
                    "receiver_wallet": receiver_wallet
                }
                try:
                    response = requests.post(f"{BACKEND_URL}/api/withdraw", json=withdrawal_data)
                    response.raise_for_status()
                    st.success("Withdrawal request submitted successfully!")
                except Exception as e:
                    st.error(f"Failed to submit withdrawal: {e}")

# --- Tab 7: Dropshipping ---
with tab7:
    st.header("📦 Dropshipping Products")
    dropship_products = fetch_dropshipping_products()
    if dropship_products:
        df = pd.DataFrame(dropship_products)
        st.dataframe(df)
    else:
        st.info("No dropshipping products found or API error.")

# --- Tab 8: Shopify Products ---
with tab8:
    st.header("🏬 Shopify Product Listing")

    if fetch_shopify_products:
        products = fetch_shopify_products()
        if not products:
            st.info("No products found or API call failed.")
        else:
            store_url = os.getenv("SHOPIFY_STORE_URL", "")
            if not store_url:
                st.warning("⚠️ SHOPIFY_STORE_URL not found in environment.")