# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

# tara_unified_dashboard.py

import sys
import os
import streamlit as st
import pandas as pd
import requests
import logging

# Try crypto_agent_module
try:
    from crypto_agent_module import CryptoAgent, crypto_agent_ui
except ImportError:
    CryptoAgent = None
    crypto_agent_ui = None

# --- Voice toggle fallback ---
try:
    from tara_voice.voice_toggle import toggle_voice_mode
except ImportError:
    def toggle_voice_mode():
        st.warning("Voice module not found.")

# --- Backend API ---
BACKEND_URL = "http://127.0.0.1:8000"

# --- Logging ---
logging.basicConfig(filename='tara_dashboard.log', level=logging.INFO)

# --- Streamlit Config ---
st.set_page_config(page_title="Tara Unified Dashboard", layout="wide")
st.title("🧠 Tara Delta Monetization Control Center")

# --- Fetch from API ---
@st.cache_data(show_spinner=False)
def fetch_agents():
    try:
        res = requests.get(f"{BACKEND_URL}/api/agents/status")
        res.raise_for_status()
        return res.json().get("agents", [])
    except Exception as e:
        st.error(f"Could not fetch agents: {e}")
        return []

@st.cache_data(show_spinner=False)
def fetch_affiliates(agent_id):
    try:
        res = requests.get(f"{BACKEND_URL}/api/agents/{agent_id}/affiliates")
        res.raise_for_status()
        return res.json().get("affiliates", [])
    except Exception:
        return []

def normalize_agent_data(raw_agents):
    normalized = []
    for agent in raw_agents:
        normalized.append({
            "Agent ID": agent.get("agent_id", ""),
            "Agent Name": agent.get("name", ""),
            "Category": agent.get("category", ""),
            "Weekly Earnings": agent.get("weekly_earnings", 0.0),
            "Monthly Profit": agent.get("monthly_profit", 0.0),
            "Monetizing": agent.get("status", "Inactive") == "Live",
            "Status": agent.get("status", "Inactive")
        })
    return normalized

def status_dot(status):
    return "🟢 Live" if status == "Live" else "⚫ Inactive"

def execute_dang_task(task):
    df = st.session_state["tara_agents_df"]
    task = task.lower()
    if task == "activate all agents":
        df["Status"] = "Live"
        df["Monetizing"] = True
        return True
    elif "activate agent" in task:
        aid = task.split()[-1].upper()
        df.loc[df["Agent ID"] == aid, ["Status", "Monetizing"]] = ["Live", True]
        return True
    elif "deactivate agent" in task:
        aid = task.split()[-1].upper()
        df.loc[df["Agent ID"] == aid, ["Status", "Monetizing"]] = ["Inactive", False]
        return True
    return False

# --- Init Data ---
raw_agents = fetch_agents()
st.session_state["tara_agents_df"] = pd.DataFrame(normalize_agent_data(raw_agents))

# --- Tabs ---
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "📊 Overview",
    "🧠 Agents",
    "💸 Crypto",
    "📈 Stocks",
    "🏦 Withdrawals"
])

# --- Overview ---
with tab1:
    st.subheader("🧭 System Modules")
    st.success("Tara Delta is online")
    st.table(pd.DataFrame({
        "Module": ["Core Intelligence", "Voice Engine", "Cyber Core", "Vision System"],
        "Status": ["🟢", "🟡", "🟢", "🟢"]
    }))

# --- Agents ---
with tab2:
    st.subheader("🧠 Agent Monitor")
    df = st.session_state["tara_agents_df"]
    df["Daily Earnings"] = (df["Weekly Earnings"] / 7).round(2)
    df["Monetizing"] = df["Monetizing"].apply(lambda x: "Yes" if x else "No")
    df["Status"] = df["Status"].apply(status_dot)

    st.dataframe(df[["Agent ID", "Agent Name", "Category", "Daily Earnings", "Weekly Earnings", "Monthly Profit", "Monetizing", "Status"]])

    st.subheader("🛠️ Commands")
    cmd = st.text_input("Enter (e.g. Activate Agent A002)")
    if st.button("Run Command"):
        if execute_dang_task(cmd):
            st.success(f"Executed: {cmd}")
        else:
            st.error("Invalid command.")

    st.subheader("🔗 View Affiliates")
    selected = st.selectbox("Agent ID", df["Agent ID"])
    affiliates = fetch_affiliates(selected)
    if affiliates:
        st.dataframe(pd.DataFrame(affiliates))
    else:
        st.info("No affiliates found.")

# --- Crypto ---
with tab3:
    st.subheader("💸 Crypto Dashboard")
    if CryptoAgent and crypto_agent_ui:
        agent = CryptoAgent("A004")
        crypto_agent_ui(agent)
    else:
        st.warning("Crypto agent module missing.")

# --- Stocks ---
with tab4:
    st.subheader("📈 Stock Screener (coming soon)")
    st.info("No stock plugin installed")

# --- Withdrawals ---
with tab5:
    st.subheader("🏦 Withdraw Funds")
    amount = st.number_input("Amount", min_value=1.0, step=1.0)
    aid = st.text_input("Agent ID")
    pin = st.text_input("PIN", type="password")
    if st.button("Submit"):
        if len(pin) == 4 and aid:
            res = requests.post(f"{BACKEND_URL}/api/withdraw", json={"agent_id": aid, "amount": amount})
            if res.status_code == 200:
                st.success("Withdrawal success!")
            else:
                st.error(res.json().get("detail", "Error"))
        else:
            st.warning("Enter Agent ID and 4-digit PIN")