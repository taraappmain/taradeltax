# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

# -*- coding: utf-8 -*-
"""Tara Unified Dashboard with Backend Sync, Global Affiliates & Dropshipping"""

import sys
import os
import streamlit as st
import pandas as pd
import logging
import requests

# --- Plugin Imports ---
try:
    from tara_skills import stock_plugin
except ImportError:
    stock_plugin = None

try:
    from tera.marketplace.crypto.crypto_agent_module import CryptoAgent, crypto_agent_ui
except ImportError:
    dashboard_dir = os.path.dirname(os.path.abspath(__file__))
    crypto_path = os.path.abspath(os.path.join(dashboard_dir, '..', 'crypto'))
    if crypto_path not in sys.path:
        sys.path.append(crypto_path)
    try:
        from crypto_agent_module import CryptoAgent, crypto_agent_ui
    except ImportError:
        CryptoAgent = None
        crypto_agent_ui = None

try:
    from tara_skills import crypto_plugin
except ImportError:
    crypto_plugin = None

try:
    from tara_voice.voice_toggle import toggle_voice_mode
except ImportError:
    def toggle_voice_mode():
        st.warning("Voice module not found.")

# --- Logging Setup ---
logging.basicConfig(
    filename='tara_dashboard.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# --- Backend API URL ---
BACKEND_URL = "http://127.0.0.1:8000"

# --- Backend Fetch Functions ---
def fetch_agents():
    try:
        resp = requests.get(f"{BACKEND_URL}/api/agents/status")
        resp.raise_for_status()
        return resp.json().get("agents", [])
    except Exception as e:
        st.error(f"Failed to fetch agents from backend: {e}")
        return []

def fetch_affiliates_for_agent(agent_id):
    try:
        resp = requests.get(f"{BACKEND_URL}/api/agents/{agent_id}/affiliates")
        resp.raise_for_status()
        return resp.json().get("affiliates", [])
    except Exception as e:
        st.warning(f"Failed to fetch affiliates for agent {agent_id}: {e}")
        return []

def fetch_dropshipping_products():
    try:
        resp = requests.get(f"{BACKEND_URL}/api/agents/A007/products")
        resp.raise_for_status()
        return resp.json().get("products", [])
    except Exception as e:
        st.error(f"Failed to fetch dropshipping products: {e}")
        return []

# --- Streamlit Setup ---
st.set_page_config(page_title="Tara Delta Monetization Dashboard", layout="wide")
st.title("🧠 Tara Delta Monetization Control Center")

# --- Initialize Session State ---
if 'tara_agents_df' not in st.session_state:
    agents = fetch_agents()
    if agents:
        df = pd.DataFrame(agents)
        df.rename(columns={
            'agent_id': 'Agent ID',
            'name': 'Agent Name',
            'category': 'Category',
            'weekly_earnings': 'Weekly Earnings',
            'monthly_profit': 'Monthly Profit',
            'withdrawable_balance': 'Withdrawable Balance',
            'status': 'Status',
            'affiliate_link': 'Affiliate Link',
        }, inplace=True)
        if 'Monetizing' not in df.columns:
            df['Monetizing'] = False
        st.session_state.tara_agents_df = df
    else:
        st.session_state.tara_agents_df = pd.DataFrame([])

if not st.session_state.get("agents_activated", False):
    st.session_state.tara_agents_df["Status"] = "Live"
    st.session_state.tara_agents_df["Monetizing"] = True
    st.session_state["agents_activated"] = True

# --- Command Processor ---
def execute_dang_task(task_name):
    task = task_name.strip().lower()
    df = st.session_state.tara_agents_df
    if task == "activate all agents":
        df["Status"] = "Live"
        df["Monetizing"] = True
        return True
    elif task.startswith("activate agent"):
        aid = task.split()[-1].upper()
        if aid in df["Agent ID"].values:
            df.loc[df["Agent ID"] == aid, ["Status", "Monetizing"]] = ["Live", True]
            return True
    elif task.startswith("deactivate agent"):
        aid = task.split()[-1].upper()
        if aid in df["Agent ID"].values:
            df.loc[df["Agent ID"] == aid, ["Status", "Monetizing"]] = ["Inactive", False]
            return True
    return False

# --- Tabs ---
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
    "📊 Overview",
    "🧠 Agents",
    "💸 Crypto",
    "📈 Stocks",
    "🌐 Global Affiliates",
    "🏦 Withdrawals",
    "📦 Dropshipping"
])

# --- Overview Tab ---
with tab1:
    st.header("🧭 System Status")
    st.success("Tara Delta is online.")
    modules = {
        "Core Intelligence": "🟢",
        "Voice Engine": "🟡" if toggle_voice_mode else "⚫",
        "Cyber Core": "🟢",
        "Vision System": "🟢",
    }
    st.table(pd.DataFrame(modules.items(), columns=["Module", "Status"]))
    st.subheader("🎙️ Voice")
    if st.button("Toggle Voice Mode"):
        toggle_voice_mode()

# --- Agents Tab ---
with tab2:
    st.header("🧠 Agent Control & Earnings")
    df = st.session_state.tara_agents_df.copy()
    if "Weekly Earnings" in df.columns:
        df["Daily Earnings"] = (df["Weekly Earnings"] / 7).round(2)
    else:
        df["Daily Earnings"] = 0.0
    df["Monetizing"] = df["Monetizing"].apply(lambda x: "Yes" if x else "No")
    df["Status"] = df["Status"].apply(lambda s: "🟢 Live" if str(s).lower() == "live" else "⚫ Inactive")
    st.dataframe(df)

    st.subheader("🛠️ Agent Commands")
    cmd = st.text_input("Enter task")
    if st.button("Execute Command"):
        if execute_dang_task(cmd):
            st.success(f"Executed: {cmd}")
            # Update the session state to keep data in sync
            st.session_state.tara_agents_df = df
        else:
            st.error("Unknown agent or command")

# --- Crypto Tab ---
with tab3:
    st.header("💸 Crypto Agent Dashboard")
    if CryptoAgent and crypto_agent_ui:
        try:
            agent = CryptoAgent("A004")
            crypto_agent_ui(agent)
        except Exception as e:
            st.error(f"Error loading Crypto Agent UI: {e}")
    else:
        st.warning("Crypto Agent module not available.")

# --- Stocks Tab ---
with tab4:
    st.header("📈 Stock Screener")
    if stock_plugin:
        try:
            stock_data = stock_plugin.get_market_snapshot()
            st.dataframe(stock_data)
        except Exception as e:
            st.error(f"Stock plugin error: {e}")
    else:
        st.warning("Stock plugin not available.")

# --- Global Affiliates Tab ---
with tab5:
    st.header("🌐 Global Affiliates Monitor")
    agent_ids = st.session_state.tara_agents_df["Agent ID"].tolist() if not st.session_state.tara_agents_df.empty else []
    selected_agent = st.selectbox("Select Agent to View Affiliates", agent_ids)
    if selected_agent:
        affiliates = fetch_affiliates_for_agent(selected_agent)
        if affiliates:
            aff_df = pd.DataFrame(affiliates)
            st.dataframe(aff_df)
        else:
            st.info("No affiliates found for selected agent.")

# --- Withdrawals Tab ---
with tab6:
    st.header("🏦 Withdrawal Panel")
    st.write("💵 Fiat Available: $1000.00")
    st.write("🪙 Crypto Available: 2.5 BTC")
    pin = st.text_input("Enter 4-digit PIN", type="password")
    if st.button("Submit Withdrawal"):
        if len(pin) == 4 and pin.isdigit():
            st.success("Withdrawal submitted.")
        else:
            st.error("Invalid PIN.")

# --- Dropshipping Tab ---
with tab7:
    st.header("📦 Dropshipping Agent Dashboard")

    product_data = fetch_dropshipping_products()
    if product_data:
        product_df = pd.DataFrame(product_data)
        st.dataframe(product_df[["name", "cost", "price", "margin", "profit_pct", "stock", "buy_now"]],
                     use_container_width=True)

        csv = product_df.to_csv(index=False).encode('utf-8')
        st.download_button("⬇️ Export Product List", data=csv, file_name="tara_dropship_products.csv")

        st.success("Dropshipping Agent A007 is Active & Monetizing 💸")
    else:
        st.info("No dropshipping products available or failed to load.")