# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

# -*- coding: utf-8 -*-
"""Tara Unified Affiliate Manager"""

from datetime import datetime, date
from typing import List, Dict
from uuid import uuid4
import csv
import requests

# --- In-Memory Affiliate Database ---
_affiliate_db: Dict[str, List[Dict]] = {
    "A001": [
        {
            "affiliate_id": "binance001",
            "name": "Binance",
            "joined_date": date(2025, 7, 3).isoformat(),
            "earnings": 0.0,
            "referral_link": "https://www.binance.com/en/register?ref=CPA_00EDS8MQJG"
        }
    ]
}

# --- Affiliate Operations ---
def list_affiliates(agent_id: str) -> List[Dict]:
    return _affiliate_db.get(agent_id, [])

def get_affiliate_count(agent_id: str) -> int:
    return len(_affiliate_db.get(agent_id, []))

def get_affiliate_earnings(agent_id: str) -> float:
    return sum(a.get("earnings", 0.0) for a in _affiliate_db.get(agent_id, []))

def add_affiliate(agent_id: str, affiliate_data: Dict) -> None:
    jd = affiliate_data.get("joined_date")
    if isinstance(jd, str):
        affiliate_data["joined_date"] = jd
    _affiliate_db.setdefault(agent_id, []).append(affiliate_data)

def inject_global_affiliates(agent_id: str, csv_file_path: str, affiliate_codes: Dict[str, str]) -> List[Dict]:
    new_affiliates = []
    try:
        with open(csv_file_path, newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                platform = row.get("Platform Name")
                template_url = row.get("Website URL")
                code = affiliate_codes.get(platform)
                if platform and template_url and code:
                    referral_url = template_url.replace("{affiliate_code}", code)
                    affiliate_data = {
                        "affiliate_id": str(uuid4())[:8],
                        "name": platform,
                        "joined_date": datetime.now().date().isoformat(),
                        "earnings": 0.0,
                        "referral_link": referral_url
                    }
                    add_affiliate(agent_id, affiliate_data)
                    new_affiliates.append(affiliate_data)
    except Exception as e:
        print(f"❌ Error reading CSV {csv_file_path}: {e}")
    return new_affiliates

def sync_affiliates_to_backend(agent_id: str, affiliates: List[Dict], backend_url: str) -> None:
    url = f"{backend_url}/api/agents/{agent_id}/affiliates/inject"
    try:
        response = requests.post(url, json=affiliates)
        response.raise_for_status()
        print(f"✅ Synced {len(affiliates)} affiliates to backend for agent {agent_id}.")
    except Exception as e:
        print(f"⚠️ Failed to sync affiliates for {agent_id}: {e}")

# --- Run from CLI ---
if __name__ == "__main__":
    backend_base_url = "http://127.0.0.1:8000"

    # Agents and CSV mapping
    agents_to_update = {
        "A001": "global_affiliate_platforms.csv",
        "A007": "dropship_affiliates.csv",
    }

    affiliate_codes_global = {
        "Binance": "CPA_00EDS8MQJG",
        "Coinbase": "YOUR_COINBASE_CODE",
        "Crypto.com": "YOUR_CRYPTO_COM_CODE",
        "OKX": "OKX_ABCDE123"
    }

    affiliate_codes_dropship = {
        "AliExpress": "DROPSHIP123",
        "Shopify": "SHOPIFY456",
        "CJdropshipping": "CJ999XYZ",
        "Zendrop": "ZEN0001"
    }

    for agent_id, csv_file in agents_to_update.items():
        print(f"🚀 Injecting for agent {agent_id} from {csv_file}...")
        codes = affiliate_codes_global if agent_id == "A001" else affiliate_codes_dropship
        new_affs = inject_global_affiliates(agent_id, csv_file, codes)
        print(f"📈 {get_affiliate_count(agent_id)} total affiliates for {agent_id}")
        sync_affiliates_to_backend(agent_id, new_affs, backend_base_url)

    # Final listing
    for agent_id in agents_to_update.keys():
        print(f"\n📋 Affiliate list for agent {agent_id}:")
        for aff in list_affiliates(agent_id):
            print(f" - {aff['name']}: {aff['referral_link']}")