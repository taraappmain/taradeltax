# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

from datetime import datetime, date
from typing import List, Dict
import csv
from uuid import uuid4
import requests

# In-memory affiliate DB - could be loaded/synced from backend if needed
_affiliate_db: Dict[str, List[Dict]] = {
    "A001": [
        {
            "affiliate_id": "binance001",
            "name": "Binance",
            "joined_date": date(2025, 7, 3).isoformat(),
            "earnings": 0.0,
            "referral_link": "https://www.binance.com/en/register?ref=CPA_00EDS8MQJG"
        }
    ]
}

def list_affiliates(agent_id: str) -> List[Dict]:
    return _affiliate_db.get(agent_id, [])

def get_affiliate_count(agent_id: str) -> int:
    return len(_affiliate_db.get(agent_id, []))

def get_affiliate_earnings(agent_id: str) -> float:
    return sum(a.get("earnings", 0.0) for a in _affiliate_db.get(agent_id, []))

def add_affiliate(agent_id: str, affiliate_data: Dict) -> None:
    jd = affiliate_data.get("joined_date")
    if isinstance(jd, str):
        affiliate_data["joined_date"] = jd  # keep ISO string
    _affiliate_db.setdefault(agent_id, []).append(affiliate_data)

def inject_global_affiliates(agent_id: str, csv_file_path: str, affiliate_codes: Dict[str, str]) -> List[Dict]:
    new_affiliates = []
    with open(csv_file_path, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            platform = row["Platform Name"]
            template_url = row["Website URL"]
            code = affiliate_codes.get(platform)
            if code:
                referral_url = template_url.replace("{affiliate_code}", code)
                affiliate_data = {
                    "affiliate_id": str(uuid4())[:8],
                    "name": platform,
                    "joined_date": datetime.now().date().isoformat(),
                    "earnings": 0.0,
                    "referral_link": referral_url
                }
                add_affiliate(agent_id, affiliate_data)
                new_affiliates.append(affiliate_data)
    return new_affiliates

def sync_affiliates_to_backend(agent_id: str, affiliates: List[Dict], backend_url: str) -> None:
    url = f"{backend_url}/api/agents/{agent_id}/affiliates/inject"
    try:
        response = requests.post(url, json=affiliates)
        response.raise_for_status()
        print(f"‚úÖ Synced {len(affiliates)} affiliates to backend for agent {agent_id}.")
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to sync affiliates to backend: {e}")

if __name__ == "__main__":
    backend_base_url = "http://127.0.0.1:8000"  # Adjust as needed

    # Example: inject for both stock agent and dropshipping agent
    agents_to_update = {
        "A001": "global_affiliate_platforms.csv",       # Your CSV file for general affiliates
        "A007": "dropship_affiliates.csv",              # Another CSV for dropshipping affiliates
    }

    # Affiliate codes per platform (can be different per agent if needed)
    affiliate_codes_global = {
        "Binance": "CPA_00EDS8MQJG",
        "Coinbase": "YOUR_COINBASE_CODE",
        "Crypto.com": "YOUR_CRYPTO_COM_CODE"
    }
    affiliate_codes_dropship = {
        "AliExpress": "DROPSHIP123",
        "Shopify": "SHOPIFY456"
    }

    # Loop through each agent & inject + sync
    for agent_id, csv_file in agents_to_update.items():
        print(f"üöÄ Injecting affiliates for agent {agent_id} from {csv_file}...")
        codes = affiliate_codes_global if agent_id == "A001" else affiliate_codes_dropship
        new_affs = inject_global_affiliates(agent_id, csv_file, codes)
        print(f"‚úÖ Injection complete! Total affiliates for {agent_id}: {get_affiliate_count(agent_id)}")
        sync_affiliates_to_backend(agent_id, new_affs, backend_base_url)

    # Optional: print all affiliates per agent
    for agent_id in agents_to_update.keys():
        print(f"\nüìã Affiliates for agent {agent_id}:")
        for aff in list_affiliates(agent_id):
            print(f" - {aff['name']}: {aff['referral_link']}")