# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpDbQhYOO3_gqQmkZ5GSsxgh3QkUXQ44
"""

# tara_unified_backend.py (updated)

from fastapi import FastAPI, HTTPException, Body, Path
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, HttpUrl
from typing import Dict, List

app = FastAPI()

# CORS for frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Data Models ---
class AffiliateUpdate(BaseModel):
    affiliate_link: HttpUrl

class WithdrawalRequest(BaseModel):
    agent_id: str
    amount: float

class AffiliateEntry(BaseModel):
    affiliate_id: str
    name: str
    joined_date: str
    earnings: float
    referral_link: HttpUrl

# --- Agents Database (In-memory) ---
agents_data = {
    "A001": {
        "agent_id": "A001",
        "name": "Tara Stock Plugin",
        "category": "Finance",
        "status": "Live",
        "affiliate_link": "https://example.com/stock",
        "withdrawable_balance": 3280.0,
        "weekly_earnings": 200.0,
        "monthly_profit": 800.0
    },
    "A002": {
        "agent_id": "A002",
        "name": "YouTube Engine",
        "category": "Content AI",
        "status": "Live",
        "affiliate_link": "https://example.com/youtube",
        "withdrawable_balance": 970.0,
        "weekly_earnings": 160.0,
        "monthly_profit": 640.0
    },
    "A003": {
        "agent_id": "A003",
        "name": "Affiliate + Dropshipping Engine",
        "category": "Marketing",
        "status": "Live",
        "affiliate_link": "https://example.com/affiliate",
        "withdrawable_balance": 1200.0,
        "weekly_earnings": 350.0,
        "monthly_profit": 1400.0
    },
    "A004": {
        "agent_id": "A004",
        "name": "Crypto Agent",
        "category": "Finance",
        "status": "Live",
        "affiliate_link": "https://example.com/crypto",
        "withdrawable_balance": 900.0,
        "weekly_earnings": 300.0,
        "monthly_profit": 1200.0
    }
}

# --- In-memory affiliate DB keyed by agent_id ---
_affiliate_db: Dict[str, List[Dict]] = {
    "A001": [
        {
            "affiliate_id": "binance001",
            "name": "Binance",
            "joined_date": "2025-07-03",
            "earnings": 0.0,
            "referral_link": "https://www.binance.com/en/register?ref=CPA_00EDS8MQJG"
        }
    ]
}

# --- API Endpoints ---

@app.get("/api/agents/status")
async def get_agents_status():
    return {"agents": list(agents_data.values())}

@app.get("/api/agents/summary")
async def get_agents_summary():
    # Aggregate totals across all agents
    total_withdrawable = sum(a['withdrawable_balance'] for a in agents_data.values())
    total_weekly = sum(a['weekly_earnings'] for a in agents_data.values())
    total_monthly = sum(a['monthly_profit'] for a in agents_data.values())
    return {
        "total_withdrawable_balance": total_withdrawable,
        "total_weekly_earnings": total_weekly,
        "total_monthly_profit": total_monthly
    }

@app.put("/api/agents/{agent_id}/affiliate")
async def update_affiliate_link(agent_id: str, update: AffiliateUpdate):
    if agent_id not in agents_data:
        raise HTTPException(status_code=404, detail="Agent not found")
    agents_data[agent_id]["affiliate_link"] = update.affiliate_link
    return {"message": f"Affiliate link updated for agent {agent_id}"}

@app.put("/api/agents/{agent_id}/earnings")
async def update_agent_earnings(agent_id: str, weekly_earnings: float = Body(...), monthly_profit: float = Body(...)):
    if agent_id not in agents_data:
        raise HTTPException(status_code=404, detail="Agent not found")
    agents_data[agent_id]["weekly_earnings"] = weekly_earnings
    agents_data[agent_id]["monthly_profit"] = monthly_profit
    agents_data[agent_id]["status"] = "Live"
    return {"message": f"Earnings updated for agent {agent_id}"}

@app.post("/api/withdraw")
async def process_withdrawal(withdrawal: WithdrawalRequest):
    agent_id = withdrawal.agent_id
    amount = withdrawal.amount

    if agent_id not in agents_data:
        raise HTTPException(status_code=404, detail="Agent not found")
    if amount <= 0:
        raise HTTPException(status_code=400, detail="Withdrawal amount must be positive")

    agent = agents_data[agent_id]
    if agent["withdrawable_balance"] >= amount:
        agent["withdrawable_balance"] -= amount
        return {"success": f"Withdrawal of ${amount} for agent {agent_id} was successful."}
    else:
        raise HTTPException(status_code=400, detail="Insufficient funds")

# --- Affiliate Endpoints ---

@app.get("/api/agents/{agent_id}/affiliates")
async def get_affiliates(agent_id: str = Path(..., description="Agent ID")):
    affiliates = _affiliate_db.get(agent_id)
    if affiliates is None:
        raise HTTPException(status_code=404, detail="Agent not found or no affiliates")
    return {"agent_id": agent_id, "affiliates": affiliates}

@app.post("/api/agents/{agent_id}/affiliates/inject")
async def inject_affiliates(agent_id: str, affiliates: List[AffiliateEntry] = Body(...)):
    if agent_id not in _affiliate_db:
        _affiliate_db[agent_id] = []
    existing_ids = {a['affiliate_id'] for a in _affiliate_db[agent_id]}
    new_added = 0
    for aff in affiliates:
        aff_dict = aff.dict()
        if aff_dict["affiliate_id"] not in existing_ids:
            _affiliate_db[agent_id].append(aff_dict)
            new_added += 1
    return {"message": f"Injected {new_added} new affiliates into agent {agent_id}"}

# --- Run Server ---
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("tara_unified_backend:app", host="127.0.0.1", port=8000, reload=True)